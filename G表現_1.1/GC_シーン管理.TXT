

//======================================================================================//
//																						//
//							Gs FUNCTIONS												//
//							GC 2010														//
//======================================================================================//


―――――――――――――――――――――――――――――――――――――――
	★	シーン切り替え時　エフェクト 関数
―――――――――――――――――――――――――――――――――――――――

関数：	フェードの終了を検出する
	BOOL	Gs_FadeCheck(void)
	
		リターン：		ON=フェード中、OFF=フェード終了


関数：	フェード　イン・アウト（コールは一回でよい）
	void	Gs_FadeOut(COLORREF col,float time)
	void	Gs_FadeIn(COLORREF col,float time)

		COLORREF	col：		フェードする色
		float 		time：		フェードしていく時間（数値大きい=早くフェードする）

ＥＸ：
	// ゆっくり赤色でフェードインした後、早く青色でフェードアウト

		// 初期化部
		Gs_FadeIn(RGB(0xff,0x00,0x00),1);

		// 内部処理部
		if (Gs_FadeCheck( )==OFF) {
			Gs_FadeOut(RGB(0x00,0x00,0xff),8);
		}

―――――――――――――――――――――――――――――――――――――――
	★	ゲームシーン管理
―――――――――――――――――――――――――――――――――――――――

シーンとは： GCライブラリでは「オープニング、タイトル、セレクト、ヘルプ、各ゲームステージ、エンディング、etc」
             などの各画面のことをシーンと定義している。
             シーン内の動作はマスター側で管理され、マスターがコールするシーン毎のエントリー関数が必要になる。


関数：
	・現在のシーン番号の取得                 		SceneMode( )
	・シーンを切り替える                      		SceneChange(シーン番号)
	・一番初めのシーンへ                       		SceneStart( )
	・フラグが０以外でウィンドゥを終了する		SceneExit(フラグ)

ＥＸ：
	// エンターキーを押すとエンディングシーンへ切り替わる
	if (Gs_GetKEYtrg(kKEYENTER)	{
		SceneChange(END_SCENE);
	}


―――――――――――――――――――――――――――――――――――――――
◎新しいシーンの作成・登録：   (例）ヘルプシーンを追加する。
―――――――――――――――――――――――――――――――――――――――
	
	① ＶＳメニューバーからファイル「新規作成」         →SRCフォルダに「Help.CPP」作成
	カテゴリ　VC++

          注：【ファイル作成の必要がない場合（現存しているファイルに追加する場合など）は省略】

	②  エントリー関数作成          →作成するシーンの「HelpLoad,HelpInit,HelpLoop,HelpDraw,HelpExit」部を作成

		Load・・・シーン内で使用する画像、音データの読み込み部（シーン切り替え時1回処理される）
		Init・・・シーンで使用する変数や設定の初期化部（シーン切り替え時1回処理される）
		Loop・・・シーンのメイン処理、内部処理部（毎回呼び出される）
		Draw・・・シーンに表示する画像の描画部
		Exit・・・現シーンから抜ける際の後処理（データの破棄）

          注：【Load関数はshort型、それ以外の関数はvoid型で作成】
              【１つのシーンは、この５つのエントリー関数で構成されることになる】

	③  シーンテーブル作成          →Help.CPPファイルの最下部に作成
		SCENE_TBL	HelpSceneTbl = {
				HelpLoad,
				HelpInit,
				HelpLoop,
				HelpDraw,
				HelpExit
		};

	④    シーンの名前を定義            →Game.H内の シーン番号の定義部 で

		enum {
			OPEN_SCENE,						// オープニング
			GAME_SCENE,						// ゲーム
			HELP_SCENE,     ← ここに定義した

			SCENE_MAX       ← これは必ず最後
		};

           注：【START_SCENEで定義されるシーンが起動直後のシーンになる】


	⑤  シーンテーブルの登録        →DataTbl.CPP内の 「シーンテーブル登録」の場所に追加

		// シーンテーブル登録
		SCENE_ENTRY(GAME_SCENE,		GameSceneTbl);
		SCENE_ENTRY(HELP_SCENE,		HelpSceneTbl);← ここに追加した

           注：【④で定義した名前とシーンテーブルを関連づけるので名前は間違わないように】
	
	以上、登録完了！



//======================================================================================//
// サンプルスケルトン「XXX」
//======================================================================================//
//																						//
//							XXX Program													//
//																						//
//======================================================================================//
#include		<windows.h>
#include		<stdio.h>
#include		<math.h>
#include		"MASTER/Ci-Lib.H"
#include		"Game.H"


//****************************************************************************
//	■	定義
//
//****************************************************************************


//****************************************************************************
//	■	内部使用　変数
//
//****************************************************************************


//--------------------------------------------------------------------------//
//	●	初期化	：シーンに移る時一回、変数の初期化
//--------------------------------------------------------------------------//
void	XXXInit(void)
{
}

//--------------------------------------------------------------------------//
//	●	内部処理：シーン中の処理、現在のシーンで行う処理
//--------------------------------------------------------------------------//
void	XXXLoop(void)
{
}

//--------------------------------------------------------------------------//
//	●	描画	：シーン中の描画、現在のシーンで表示するBMPはここで
//--------------------------------------------------------------------------//
void	XXXDraw(void)
{
}

//--------------------------------------------------------------------------//
//	●	ロード	：シーンに入る時、そのシーンで必要なデータの読み込み
//--------------------------------------------------------------------------//
short	XXXLoad(void)
{
	return		XXX_SCENE;
}

//--------------------------------------------------------------------------//
//	●	後処理	：現在のシーンから抜ける時、データの破棄
//--------------------------------------------------------------------------//
void	XXXExit(void)
{
}

//--------------------------------------------------------------------------//
//	★　シーンテーブル：各シーンで呼び出される関数の登録
//--------------------------------------------------------------------------//

SCENE_TBL	XXXSceneTbl = {
		XXXLoad,				// シーンが切り替わった時、各シーンで使用する絵、音のロード
		XXXInit,				// 各シーンで使用する変数初期化
		XXXLoop,				// 各シーンのメイン処理
		XXXDraw,				// 各シーンの描画
		XXXExit					// シーンから抜ける（移動する）時の各シーンの後処理(ＢＭＰなどの破棄）
};

//======================================================================================//
//							EOP															//
//======================================================================================//
